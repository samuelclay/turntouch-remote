# ================================================================
# BGScript demo application: GPIO interrupts
# Jeff Rowberg <jeff.rowberg@bluegiga.com>
# ----------------------------------------------------------------
#
# CHANGELOG:
#   2013-04-16 - Fix missing P1 data storage
#   2013-01-10 - Initial release
#
# ================================================================

const PIN_SELECT_MASK = $0F         # 0b11111111 = Px_0-Px_7 are outputs

dim connected       # BLE connection status
dim advertising     # advertising status (0=off, 1=on)
dim io_status(2)    # port status characteristic local uint8array container
dim ipr_result      # container for io_port_read() call's returned "result" value (uint16)
dim ipr_port        # container for io_port_read() call's returned "port" value (uint8)
dim ipr_data        # container for io_port_read() call's returned "port" value (uint8)
dim port0_delta     # debounce comparison variable
dim port1_delta     # debounce comparison variable


event system_boot(major, minor, patch, build, ll_version, protocol, hw)
    # initialize connection status as DISCONNECTED
    connected = 0
    
    # initialize advertising status as ON (since we're about to turn it on)
    advertising = 1

    # initialize simple GPIO debouncing test var to 0 (first press will be accepted)
    port0_delta = 0
    port1_delta = 0
    
    # set advertisement interval to 200-300ms, and use all advertisement channels
    # (note min/max parameters are in units of 625 uSec)
    call gap_set_adv_parameters(320, 480, 7)

    # put module into discoverable/connectable mode
    call gap_set_mode(gap_general_discoverable, gap_undirected_connectable)
    
    # # enable interrupt on P0_X rising edge
    # # (parameters are port=0, bitmask=0b00000011, edge=rising)
    # call hardware_io_port_config_irq(0, PIN_SELECT_MASK, 0)    
    # # enable interrupt on P1_6 rising edge
    # # (parameters are port=1, bitmask=0b01000000, edge=rising)
    # call hardware_io_port_config_irq(1, 64, 0)
    
    # enable falling-edge interrupts on Port0 pins
    call hardware_io_port_config_pull(0, $00, 0)
    call hardware_io_port_irq_enable(0, PIN_SELECT_MASK)
    call hardware_io_port_irq_direction(0, 1)

    # enable rising-edge interrupts on Port1 pins
    # (dual-pin connections allows CHANGE-style interrupts)
    call hardware_io_port_config_pull(1, $00, 0)
    call hardware_io_port_irq_enable(1, PIN_SELECT_MASK)
    call hardware_io_port_irq_direction(1, 0)
    
    # DEVKIT UART OUTPUT: welcome message
    call system_endpoint_tx(system_endpoint_uart1, 28, "\r\n========================\r\n")
    call system_endpoint_tx(system_endpoint_uart1, 26, "Bluegiga GPIO Demo Ready\r\n")
end

event connection_status(connection, flags, address, address_type, conn_interval, timeout, latency, bonding)
    # check for "new connection established" event
    if (flags & $05) = $05 then
        # set connection status to CONNECTED
        connected = 1

        # DEVKIT UART OUTPUT: connected
        call system_endpoint_tx(system_endpoint_uart1, 11, "CONNECTED\r\n")
    end if
    
    # check for "encrypted" status (e.g. connected + bonded, not used by this IRQ demo)
    if (flags & $02) = $02 then
        # DEVKIT UART OUTPUT: connected
        call system_endpoint_tx(system_endpoint_uart1, 11, "ENCRYPTED\r\n")
    end if
end

event connection_disconnected(handle, result)
    # set connection status to DISCONNECTED
    connected = 0
    
    # DEVKIT UART OUTPUT: disconnected
    call system_endpoint_tx(system_endpoint_uart1, 14, "DISCONNECTED\r\n")

    # set advertisement interval back to 200-300ms, use all advertisement channels
    # (note min/max parameters are in units of 625 uSec)
    call gap_set_adv_parameters(320, 480, 7)

    # put module back into discoverable/connectable mode
    # (also resumes advertising based on parameters)
    call gap_set_mode(gap_general_discoverable, gap_undirected_connectable)
end

# catch button press for P0_0, P0_1, P1_6 (active HIGH configuration, hardware.xml pulls it low)
event hardware_io_port_status(delta, port, irq, state)
    # reject this press if it's less then 100ms after the last one (32768 = 1 sec)
    if port = 0 then
        if delta - port0_delta < 3277 then
            return
        end if
    end if
    if port = 1 then
        if delta - port1_delta < 3277 then
            return
        end if
    end if
    
    if port = 0 then
        port0_delta = delta
    end if
    if port = 1 then
        port1_delta = delta
    end if
    
    if port = 0 then
        if (irq & 1) = 1 then
            # P0_0 is HIGH and the source of this interrupt
            # DEVKIT UART OUTPUT: P0_0 pressed
            call system_endpoint_tx(system_endpoint_uart1, 14, "P0_0 pressed\r\n")
        end if
        if (irq & 2) = 2 then
            # P0_1 is HIGH and the source of this interrupt
            # DEVKIT UART OUTPUT: P0_1 pressed
            call system_endpoint_tx(system_endpoint_uart1, 14, "P0_1 pressed\r\n")
        end if
        
        # store state of Port 0 now, since we already have it
        io_status(0:1) = state
        
        # read state of Port 1
        call hardware_io_port_read(1, $ff)(ipr_result, ipr_port, ipr_data)
        io_status(1:1) = ipr_data

        # state of Port 2 read later, since we have to do it in either interrupt case
    end if
    if port = 1 then
        if (irq & 64) = 64 then
            # P1_6 is HIGH and the source of this interrupt
            # DEVKIT UART OUTPUT: P1_6 pressed
            call system_endpoint_tx(system_endpoint_uart1, 14, "P1_6 pressed\r\n")
            
            # toggle advertising mode for run
            if advertising = 0 then
                # was off, so turn it on
                call gap_set_mode(gap_general_discoverable, gap_undirected_connectable)
                advertising = 1
            else
                # was on, so turn it off
                call gap_set_mode(gap_non_discoverable, gap_non_connectable)
                advertising = 0
            end if
        end if

        # read state of Port 0
        call hardware_io_port_read(0, $ff)(ipr_result, ipr_port, ipr_data)
        io_status(0:1) = ipr_data

        # store state of Port 1 now, since we already have it
        io_status(1:1) = state

        # state of Port 2 read later, since we have to do it in either interrupt case
    end if
    
    # read state of Port 2
    # call hardware_io_port_read(2, $ff)(ipr_result, ipr_port, ipr_data)
    # io_status(2:1) = ipr_data
    
    # update characteristic value (will push data if client has subscribed to notifications/indications)
    call attributes_write(c_gpio_status, 0, 2, io_status(0:2))
end