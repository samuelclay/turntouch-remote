# ================================================================
# Turn Touch Remote Firmware
# Samuel Clay <samuel@turntouch.com>
# ----------------------------------------------------------------
#
# CHANGELOG:
#   2015-04-02 - Firmware values modifiable over GATT
#   2014-12-24 - Initial release
#
# ================================================================

# Button status pin masks
const PORT0_PIN_SELECT_MASK = $C3         # 0b11000011 = P0_0-P0_1 & P0_6-P0_7 are inputs
const PORT1_PIN_SELECT_MASK = $78         # 0b01110000 = Px_3-Px_6 are inputs

## From Section 3.6 in Apple Bluetooth Design Guidelines
## https://developer.apple.com/hardwaredrivers/BluetoothDesignGuidelines.pdf
# Interval Max * (Slave Latency + 1) ≤ 2 seconds 
# Interval Min ≥ 20 ms
# Interval Min + 20 ms ≤ Interval Max Slave Latency ≤ 4 
# connSupervisionTimeout ≤ 6 seconds
# Interval Max * (Slave Latency + 1) * 3 < connSupervisionTimeout
const DEFAULT_INTERVAL_MIN = 102 # units of 1.25ms
const DEFAULT_INTERVAL_MAX = 148 # units of 1.25ms
const DEFAULT_CONN_LATENCY = 3
const DEFAULT_CONN_TIMEOUT = 500 # units of 10ms

# Flash storage offsets/addresses
const ps_interval_min_uuid = $8000
const ps_interval_max_uuid = $8001
const ps_conn_latency_uuid = $8002
const ps_conn_timeout_uuid = $8003

# Global variables
dim connected           # BLE connection status
dim advertising         # advertising status (0=off, 1=on)
dim io_status(4)        # port status characteristic local uint8array container
dim ipr_result          # container for io_port_read() call's returned "result" value (uint16)
dim ipr_port            # container for io_port_read() call's returned "port" value (uint8)
dim ipr_data            # container for io_port_read() call's returned "port" value (uint8)
dim port0_delta(4)      # debounce comparison variable
dim port1_delta(4)      # debounce comparison variable
dim irq_pos             # convert irq from bitvector to single number
dim holding_irq         # currently holding a button for a mode change
dim last_sent_state(2)  # snapshot of last sent state, to avoid repeats
dim bat_pct             # battery percentage
dim last_bat_pct        # cache of last battery % seen
dim ps_interval_min     # connection interval, higher value consumes less battery
dim ps_interval_max     # connection interval, lower value has less latency
dim ps_conn_latency     # number of events to skip if nothing changes (for battery)
dim ps_conn_timeout     # max timeout on acknowledging master
dim t(12)               # debug value used to convert int to string
dim ps_error            # Flash storage error
dim ps_len              # Flash storage variable length
dim ps_data(8)          # uint8array for Flash storage data

# ========================
# = PS Firmware Settings =
# ======================== 

# Resets firmware settings
procedure reset_ps_settings()
    call flash_ps_save(ps_interval_min_uuid, 2, DEFAULT_INTERVAL_MIN)
    call flash_ps_save(ps_interval_max_uuid, 2, DEFAULT_INTERVAL_MAX)
    call flash_ps_save(ps_conn_latency_uuid, 2, DEFAULT_CONN_LATENCY)
    call flash_ps_save(ps_conn_timeout_uuid, 2, DEFAULT_CONN_TIMEOUT)
end

# Set global variables with flash firmware settings, setting defaults if necessary
procedure read_ps_settings()
    call flash_ps_load(ps_interval_min_uuid)(ps_error, ps_len, ps_data(0:2))
    if ps_error != 0 then
        # No values set, so set defaults
        call system_endpoint_tx(system_endpoint_uart1, 29, "\n\r ---> No flash values set...")
        call reset_ps_settings()
        call flash_ps_load(ps_interval_min_uuid)(ps_error, ps_len, ps_data(0:2))
    end if
    call flash_ps_load(ps_interval_max_uuid)(ps_error, ps_len, ps_data(2:2))
    call flash_ps_load(ps_conn_latency_uuid)(ps_error, ps_len, ps_data(4:2))
    call flash_ps_load(ps_conn_timeout_uuid)(ps_error, ps_len, ps_data(6:2))
    ps_interval_min = ps_data(0:2)
    ps_interval_max = ps_data(2:2)
    ps_conn_latency = ps_data(4:2)
    ps_conn_timeout = ps_data(6:2)
end

procedure print_int(value)
    t(0:1) = (value/1000) + (value / 10000*-10) + 48
    t(1:1) = (value/100) + (value / 1000*-10) + 48
    t(2:1) = (value/10) + (value / 100*-10) + 48
    t(3:1) = (value) + (value / 10*-10) + 48
    call system_endpoint_tx(system_endpoint_uart1, 4, t(0:4))
end

# ===============
# = System Boot =
# ===============

# Main routine
event system_boot(major, minor, patch, build, ll_version, protocol, hw)
    # initialize connection status as DISCONNECTED
    connected = 0
    
    # initialize advertising status as ON (since we're about to turn it on)
    advertising = 1

    # initialize simple GPIO debouncing test var to 0 (first press will be accepted)
    port0_delta(0:4) = 0
    port1_delta(0:4) = 0
    last_sent_state(0:2) = $0f
    irq_pos = 0
    holding_irq = $ff
    
    # initialize battery level
    last_bat_pct = 0
    
    # set all GPIO pins to input/high (pull), except P1_0 and P1_1 to output HIGH (no internal pull-ups)
    # P1_0/1 will leak current if not externally pulled or set as outputs
    call hardware_io_port_config_direction(0, $0)
    call hardware_io_port_write(0, $ff, $ff)
    call hardware_io_port_config_direction(1, $3)
    call hardware_io_port_write(1, $ff, $ff)
    call hardware_io_port_config_direction(2, $0)
    call hardware_io_port_write(2, $ff, $ff)
    
    # set advertisement interval to 200-300ms, and use all advertisement channels
    # (note min/max parameters are in units of 625 uSec)
    # call gap_set_adv_parameters(1600, 3200, 7)
    call gap_set_adv_parameters(64, 96, 1)

    # put module into discoverable/connectable mode
    call gap_set_mode(gap_general_discoverable, gap_undirected_connectable)
    
    # enable falling-edge interrupts on Port0 pins
    call hardware_io_port_config_pull(0, $00, 1)
    call hardware_io_port_irq_enable(0, PORT0_PIN_SELECT_MASK)
    call hardware_io_port_irq_direction(0, 0)

    # enable rising-edge interrupts on Port1 pins
    # (dual-pin connections allows CHANGE-style interrupts)
    call hardware_io_port_config_pull(1, $00, 1)
    call hardware_io_port_irq_enable(1, PORT1_PIN_SELECT_MASK)
    call hardware_io_port_irq_direction(1, 1)
    
    # DEVKIT UART OUTPUT: welcome message
    call system_endpoint_tx(system_endpoint_uart1, 32, "\r\n============================\r\n")
    call system_endpoint_tx(system_endpoint_uart1, 30, "Turn Touch Mac Remote Bootup\r\n")
    call system_endpoint_tx(system_endpoint_uart1, 32, "============================\r\n\r\n")
    
    # Read firmware settings from flash, setting defaults if values not set
    call read_ps_settings()
    
    # Log current firmware settings
    call system_endpoint_tx(system_endpoint_uart1, 9, "\n\r$8000: ")
    call print_int(ps_data(0:2))
    call system_endpoint_tx(system_endpoint_uart1, 9, "\n\r$8001: ")
    call print_int(ps_data(2:2))
    call system_endpoint_tx(system_endpoint_uart1, 9, "\n\r$8002: ")
    call print_int(ps_data(4:2))
    call system_endpoint_tx(system_endpoint_uart1, 9, "\n\r$8003: ")
    call print_int(ps_data(6:2))
    call system_endpoint_tx(system_endpoint_uart1, 2, "\n\r")
    
    # Firmware settings placed into GATT for server to read
    call attributes_write(c_interval_min, 0, 2, ps_interval_min)
    call attributes_write(c_interval_max, 0, 2, ps_interval_max)
    call attributes_write(c_conn_latency, 0, 2, ps_conn_latency)
    call attributes_write(c_conn_timeout, 0, 2, ps_conn_timeout)
    
end

# ==============
# = Connection =
# ==============

# Called when connection changes, including any connection settings
event connection_status(connection, flags, address, address_type, interval, timeout, latency, bonding)
    # check for "new connection established" event
    call system_endpoint_tx(system_endpoint_uart1, 27, " ---> CONNECTED, interval: ")
    call print_int(interval)
    call system_endpoint_tx(system_endpoint_uart1, 2, "\r\n")

    if (flags & $05) = $05 then
        connected = 1
        
        call connection_update(connection, ps_interval_min, ps_interval_max, ps_conn_latency, ps_conn_timeout)
    end if
    
    # check for "encrypted" status (e.g. connected + bonded, not used by this IRQ demo)
    if (flags & $02) = $02 then
        # DEVKIT UART OUTPUT: connected
        call system_endpoint_tx(system_endpoint_uart1, 11, "ENCRYPTED\r\n")
    end if
end

# Device disconnects from server
event connection_disconnected(handle, result)
    # set connection status to DISCONNECTED
    connected = 0
    
    # DEVKIT UART OUTPUT: disconnected
    call system_endpoint_tx(system_endpoint_uart1, 14, "DISCONNECTED\r\n")

    # set advertisement interval back to 200-300ms, use all advertisement channels
    # (note min/max parameters are in units of 625 uSec)
    # call gap_set_adv_parameters(1600, 3200, 7)
    call gap_set_adv_parameters(64, 96, 1)

    # put module back into discoverable/connectable mode
    # (also resumes advertising based on parameters)
    call gap_set_mode(gap_general_discoverable, gap_undirected_connectable)
end

# GATT value changed
event attributes_value(connection, reason, handle, offset, value_len, value_data)
    # Check each firmware setting by handle, then compare to internal value.
    # If GATT value and PS value are different, save to PS and update globals.
    if handle = c_interval_min then
        call flash_ps_load(ps_interval_min_uuid)(ps_error, ps_len, ps_data(0:2))
        if ps_error = 0 && ps_data(0:2) != value_data(0:2) then
            call flash_ps_save(ps_interval_min_uuid, 2, value_data(0:2))
        else
            call system_endpoint_tx(system_endpoint_uart1, 21, "ps_data == value_data")
        end if
    end if
    if handle = c_interval_max then
        call flash_ps_load(ps_interval_max_uuid)(ps_error, ps_len, ps_data(0:2))
        if ps_error = 0 && ps_data(0:2) != value_data(0:2) then
            call flash_ps_save(ps_interval_max_uuid, 2, value_data(0:2))
        else
            call system_endpoint_tx(system_endpoint_uart1, 21, "ps_data == value_data")
        end if
    end if
    if handle = c_conn_latency then
        call flash_ps_load(ps_interval_min_uuid)(ps_error, ps_len, ps_data(0:2))
        if ps_error = 0 && ps_data(0:2) != value_data(0:2) then
            call flash_ps_save(ps_conn_latency_uuid, 2, value_data(0:2))
        else
            call system_endpoint_tx(system_endpoint_uart1, 21, "ps_data == value_data")
        end if
    end if
    if handle = c_conn_timeout then
        call flash_ps_load(ps_interval_min_uuid)(ps_error, ps_len, ps_data(0:2))
        if ps_error = 0 && ps_data(0:2) != value_data(0:2) then
            call flash_ps_save(ps_conn_timeout_uuid, 2, value_data(0:2))
        else
            call system_endpoint_tx(system_endpoint_uart1, 21, "ps_data == value_data")
        end if
    end if
    
    if value_data(0:4) = $0000
        call system_endpoint_tx(system_endpoint_uart1, 21, "Resetting PS data...\r\n")
        call reset_ps_settings()
    end if
    
    # Update global firmware settings based on changes made above
    call read_ps_settings()
    
    # Update connection with new firmware settings given by server
    call connection_update(connection, ps_interval_min, ps_interval_max, ps_conn_latency, ps_conn_timeout)
end

procedure sleep()
    if connected then    
        call system_endpoint_tx(system_endpoint_uart1, 13, "Sleeping...\r\n")
        call gap_set_mode(0, 0)
    else    
        call system_endpoint_tx(system_endpoint_uart1, 13, "Scanning...\r\n")
        call gap_set_mode(gap_general_discoverable, gap_undirected_connectable)
    end if
end

# ========
# = GPIO =
# ========

# Capture button presses (active LOW, hardware.xml pulls it high)
event hardware_io_port_status(delta, port, irq, state)
    # normalize irq
    call system_endpoint_tx(system_endpoint_uart1, 13, "Interrupt -- ")
    call print_int(irq)
    
    if (port = 0 && (irq & $01)) || (port = 1 && (irq & $08)) then
        irq_pos = 1
    end if
    if (port = 0 && (irq & $02)) then
        irq_pos = 2
    end if
    if (port = 1 && (irq & $10)) then
        irq_pos = 2
    end if
    if (port = 0 && (irq & $40)) || (port = 1 && (irq & $20)) then
        irq_pos = 3
    end if
    if (port = 0 && (irq & $80)) then
        irq_pos = 4
    end if
    if (port = 1 && (irq & $40)) then
        irq_pos = 4
    end if
    
    # reject this press if it's less then 100ms after the last one (32768 = 1 sec)
    if port = 0 then
        if delta - port0_delta(irq_pos:1) < 6554 then
            return # 100ms debounce
        end if
    end if
    if port = 1 then
        if delta - port1_delta(irq_pos:1) < 6554 then
            return # 100ms debounce
        end if
    end if
    
    # start mode change timer
    call hardware_set_soft_timer(0, 0, 1)
    # use falling edge port to detect button pressed
    if port = 1 then
        call hardware_set_soft_timer(23592, 0, 1) # 600ms
    end if
    if port = 0 then
        port0_delta(irq_pos:1) = delta
    end if
    if port = 1 then
        port1_delta(irq_pos:1) = delta
    end if
    
    if port = 0 then       
        # store state of Port 0 now, since we already have it
        io_status(0:1) = state & PORT0_PIN_SELECT_MASK
        
        # read state of Port 1
        call hardware_io_port_read(1, $ff)(ipr_result, ipr_port, ipr_data)
        io_status(3:1) = ipr_data & PORT1_PIN_SELECT_MASK
    end if
    if port = 1 then
        # read state of Port 0
        call hardware_io_port_read(0, $ff)(ipr_result, ipr_port, ipr_data)
        io_status(0:1) = ipr_data & PORT0_PIN_SELECT_MASK

        # store state of Port 1 now, since we already have it
        io_status(3:1) = state & PORT1_PIN_SELECT_MASK
    end if
    
    # Add port and irq to message for debugging
    io_status(0:1) = (io_status(0:1) >> 4) | (io_status(0:1) & $0F)
    io_status(1:1) = $00
    # update characteristic value (will push data if client has subscribed to notifications/indications)
    if last_sent_state(0:1) != io_status(0:1) then
        last_sent_state(0:1) = io_status(0:1)
        call attributes_write(c_gpio_status, 0, 2, io_status(0:2))
    end if
    
    # Nothing left to do but sleep
    call sleep()
end

# =========
# = Timer =
# =========

# Mode change timer
event hardware_soft_timer(handle)
    # read state of Port 0
    call system_endpoint_tx(system_endpoint_uart1, 16, "Wake for timer\r\n")
    
    call hardware_io_port_read(0, $ff)(ipr_result, ipr_port, ipr_data)
    io_status(0:1) = ipr_data & PORT0_PIN_SELECT_MASK
    io_status(0:1) = (io_status(0:1) >> 4) | (io_status(0:1) & $0F)
    io_status(1:1) = $ff
    
    if last_sent_state(0:1) = io_status(0:1) && io_status(0:1) != $0f then
        call system_endpoint_tx(system_endpoint_uart1, 13, "Mode change!\r\n")
        call attributes_write(c_gpio_status, 0, 2, io_status(0:2))
    end if
    
    call sleep()
end

# =======================
# = ADC - Battery Level =
# =======================

# Server has requested an attribute value
event attributes_user_read_request(connection, handle, offset, maxsize)
    if handle = c_battery_level
        call system_endpoint_tx(system_endpoint_uart1, 10, "Battery?\r\n")
        call hardware_adc_read($0f, 1, 0)
    end if
end

# This event listener catches the ADC read result
event hardware_adc_result(input, value)
    # ADC behavior:
    # - Range is [-2048, +2047] when 12 ENOB is selected
    # - Value will be left-aligned in a 16-bit container, meaning the direct
    #       result will be in the range [-32768, +32767] and must be shifted
    # - Actual battery readings will only ever be positive, so we only care
    #       about the positive part of the range [0, +32767] or 0x0000-0x7FFF
    # - VDD voltage = (value >> 4) * 3 * 1.24 / 2048
    # *** IMPORTANT***
    # A new CR2032 battery reads at ~2.52v based on some tests, but different
    # batteries may exhibit different levels here depending on chemistry.
    # You should test the range with your own battery to make sure).
    # - A "full" battery will read ~2.5v:
    #   --> (3.0v/3) * (32767/1.24v) = 26425
    # - An "empty" battery will read ~2.0v (min module voltage):
    #   --> (2.0v/3) * (32767/1.24v) = 17616
    # This means we must scale [+17616, +23342] to [0, +100]
    bat_pct = (value - 17616) * 100 / (26425 - 17616)
    
    # Only update battery level if it has dropped
    # >= only for testing, change to >
    if last_bat_pct = 0 || last_bat_pct >= bat_pct || last_bat_pct < bat_pct
        last_bat_pct = bat_pct
        # respond with calculated percent (connection=stored value, result=0, length=1, data=bat_pct)
        call system_endpoint_tx(system_endpoint_uart1, 10, "Battery!\r\n")
        call attributes_user_read_response(0, 0, 1, bat_pct)
    end if

    call sleep()
end
